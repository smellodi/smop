<Window x:Class="Smop.MainApp.Dialogs.PauseEstimatorEditor"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Smop.MainApp.Dialogs"
        xmlns:utils="clr-namespace:Smop.MainApp.Utils"
        mc:Ignorable="d"
        DataContext="{Binding PauseEstimator, RelativeSource={RelativeSource Self}, Mode=OneWay}"
        Title="Pulse Interval Estimator"
        d:Height="580"
        Width="220"
        WindowStyle="ToolWindow"
        WindowStartupLocation="CenterOwner"
        Icon="/Assets/icons/main.png"
        SizeToContent="Height"
        Loaded="Window_Loaded"
        Unloaded="Window_Unloaded">

    <Window.Resources>
        <utils:NullableNumberToString x:Key="num2str"/>
        <utils:BoolInverse x:Key="inverseBool"/>
        
        <Style x:Key="CloseButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
            <Setter Property="Margin" Value="4,0" />
            <Setter Property="Padding" Value="12,4" />
            <Setter Property="MinWidth" Value="58" />
        </Style>
        <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
            <Setter Property="Padding" Value="0"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style>
        <Style x:Key="Header" TargetType="{x:Type Label}">
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
        </Style>
        <Style TargetType="{x:Type Separator}" BasedOn="{StaticResource {x:Type Separator}}">
            <Setter Property="Background" Value="LightGray"/>
            <Setter Property="Margin" Value="0,8"/>
        </Style>
        <Style TargetType="{x:Type RadioButton}">
            <Setter Property="Margin" Value="2"/>
        </Style>
    </Window.Resources>

    <StackPanel Margin="8,0">
        <StackPanel.LayoutTransform>
            <ScaleTransform x:Name="sctScale"/>
        </StackPanel.LayoutTransform>

        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="60"/>
            </Grid.ColumnDefinitions>

            <Label Grid.Row="0" Grid.ColumnSpan="2"
                   Style="{StaticResource Header}"
                   Content="Saturation"/>
            
            <Label Grid.Row="1" Grid.Column="0">Minimum duration (B), sec</Label>
            <TextBox x:Name="txbMinSaturationDuration" Grid.Row="1" Grid.Column="1">
                <TextBox.Text>
                    <Binding Path="MinSaturationDuration" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                        <Binding.ValidationRules>
                            <local:RangeRule Min="0" Max="200" ValidatesOnTargetUpdated="True"/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>

            <Label Grid.Row="2" Grid.Column="0">Gain (G)</Label>
            <TextBox x:Name="txbSaturationGain" Grid.Row="2" Grid.Column="1">
                <TextBox.Text>
                    <Binding Path="SaturationGain" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                        <Binding.ValidationRules>
                            <local:RangeRule Min="0" Max="100" ValidatesOnTargetUpdated="True"/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>

            <Label Grid.Row="3" Grid.Column="0">Exponential gain (A)</Label>
            <TextBox x:Name="txbSaturationExpGain" Grid.Row="3" Grid.Column="1">
                <TextBox.Text>
                    <Binding Path="SaturationExpGain" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                        <Binding.ValidationRules>
                            <local:RangeRule Min="-1" Max="-0.0001" ValidatesOnTargetUpdated="True"/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>

            <StackPanel Grid.Row="4" Grid.ColumnSpan="2">
                <Separator Margin="4,8,0,0"/>
                <Label Style="{StaticResource Header}"
                   Content="Cleanup"/>
            </StackPanel>

            <UniformGrid Grid.Row="5" Grid.ColumnSpan="2" Rows="1" Columns="2">
                <RadioButton Content="Interval"
                             HorizontalAlignment="Center"
                             IsChecked="{Binding UseCleanupPidLevel, Mode=TwoWay, Converter={StaticResource inverseBool}}"/>
                <RadioButton Content="PID level"
                             HorizontalAlignment="Center"
                             IsChecked="{Binding UseCleanupPidLevel, Mode=TwoWay}"/>
            </UniformGrid>

            <Separator Grid.Row="6" Grid.ColumnSpan="2"/>

            <Grid Grid.Row="7" Grid.ColumnSpan="2"
                  IsEnabled="{Binding UseCleanupPidLevel, Mode=OneWay, Converter={StaticResource inverseBool}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="60"/>
                </Grid.ColumnDefinitions>

                <Label Grid.Row="0" Grid.Column="0">Minimum duration (B), sec</Label>
                <TextBox x:Name="txbMinCleanupDuration" Grid.Row="0" Grid.Column="1">
                    <TextBox.Text>
                        <Binding Path="MinCleanupDuration" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <local:RangeRule Min="0" Max="200" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>

                <Label Grid.Row="1" Grid.Column="0">Gain (G)</Label>
                <TextBox x:Name="txbCleanupGain" Grid.Row="1" Grid.Column="1">
                    <TextBox.Text>
                        <Binding Path="CleanupGain" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <local:RangeRule Min="0" Max="100" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>

                <Label Grid.Row="2" Grid.Column="0">Exponential gain (A)</Label>
                <TextBox x:Name="txbCleanupExpGain" Grid.Row="2" Grid.Column="1">
                    <TextBox.Text>
                        <Binding Path="CleanupExpGain" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <local:RangeRule Min="0.001" Max="1" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>

            <Separator Grid.Row="8" Grid.ColumnSpan="2"/>

            <Grid Grid.Row="9" Grid.ColumnSpan="2"
                  IsEnabled="{Binding UseCleanupPidLevel, Mode=OneWay}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="60"/>
                </Grid.ColumnDefinitions>

                <Label Grid.Row="0" Grid.Column="0">PID level, V</Label>
                <TextBox x:Name="txbCleanupPidLevel" Grid.Row="0" Grid.Column="1">
                    <TextBox.Text>
                        <Binding Path="CleanupPidLevel" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <local:RangeRule Min="0.05" Max="0.1" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>
        </Grid>

        <StackPanel>
            <StackPanel.Resources>
                <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                    <Setter Property="TextWrapping" Value="Wrap"/>
                    <Setter Property="TextAlignment" Value="Center"/>
                </Style>
                <Style TargetType="Separator" BasedOn="{StaticResource {x:Type Separator}}">
                    <Setter Property="Background" Value="#444444"/>
                </Style>
            </StackPanel.Resources>
            
            <Border Margin="0,8"
                    Padding="8"
                    BorderThickness="2"
                    BorderBrush="#666666">
                <StackPanel>
                    <TextBlock>Note: both intervals are estimated using the save equation:</TextBlock>
                    <TextBlock HorizontalAlignment="Center"
                           FontStyle="Italic"
                           FontWeight="SemiBold"
                           Margin="4"
                           Text="T = B + G * e^(A * F)"/>
                    <TextBlock>where F is an odor flow in sccm</TextBlock>
                </StackPanel>
            </Border>
            
            <TextBlock>Type a flow value into the box below to inspect the estimated intervals using the parameters above:</TextBlock>
            
            <Grid Margin="0,8,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>

                <Label Grid.Row="0" Grid.Column="0"
                       HorizontalContentAlignment="Center"
                       Content="Flow, sccm"/>
                <Label Grid.Row="0" Grid.Column="1"
                       HorizontalContentAlignment="Center"
                       Content="Saturation"/>
                <Label Grid.Row="0" Grid.Column="2"
                       HorizontalContentAlignment="Center"
                       Content="Cleanup"/>

                <TextBox x:Name="txbExampleFlow" Grid.Row="1"
                         Text="{Binding ExampleFlow, Converter={StaticResource num2str}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                <Label Grid.Row="1" Grid.Column="1"
                       FontWeight="Bold"
                       Background="#EEF4FE"
                       Margin="2,0"
                       HorizontalContentAlignment="Center"
                       Content="{Binding ExampleSaturation, Mode=OneWay, Converter={StaticResource num2str}}"/>
                <Label Grid.Row="1" Grid.Column="2"
                       FontWeight="Bold"
                       Margin="2,0"
                       Background="#EEF4FE"
                       HorizontalContentAlignment="Center"
                       Content="{Binding ExampleCleanup, Mode=OneWay, Converter={StaticResource num2str}}"/>
            </Grid>
        </StackPanel>

        <WrapPanel Margin="12"
                   HorizontalAlignment="Center">
            <Button Content="OK"
                    IsDefault="True"
                    Click="OK_Click">
                <Button.Style>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource CloseButton}">
                        <Setter Property="IsEnabled" Value="false" />
                        <Style.Triggers>
                            <!-- Require the controls to be valid in order to press Save -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding ElementName=txbMinSaturationDuration, Path=(Validation.HasError)}" Value="False" />
                                    <Condition Binding="{Binding ElementName=txbSaturationGain, Path=(Validation.HasError)}" Value="False" />
                                    <Condition Binding="{Binding ElementName=txbSaturationExpGain, Path=(Validation.HasError)}" Value="False" />
                                    <Condition Binding="{Binding ElementName=txbMinCleanupDuration, Path=(Validation.HasError)}" Value="False" />
                                    <Condition Binding="{Binding ElementName=txbCleanupGain, Path=(Validation.HasError)}" Value="False" />
                                    <Condition Binding="{Binding ElementName=txbCleanupExpGain, Path=(Validation.HasError)}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="True" />
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Button Style="{StaticResource CloseButton}"
                    Content="Cancel"
                    IsCancel="True"/>
        </WrapPanel>
    </StackPanel>
</Window>
